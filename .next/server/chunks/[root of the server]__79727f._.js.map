{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/src/lib/Prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport default prisma;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;uCAEhB"}},
    {"offset": {"line": 30, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/src/service/HistorialServices.ts"],"sourcesContent":["import prisma from \"@/lib/Prisma\";\r\nimport { historialmedico } from \"@prisma/client\";\r\n\r\nexport const getAllHistoriales = async (): Promise<historialmedico[]> => {\r\n    try {\r\n        return await prisma.historialmedico.findMany({\r\n            where: { estado: true },\r\n            include: {\r\n                profesional: {\r\n                    select: {\r\n                        nombre: true,\r\n                        apellido: true,\r\n                        email: true\r\n                    }\r\n                },\r\n                persona: true,\r\n                diagnostico: true,\r\n                tratamiento: true,\r\n                examenes: true\r\n            },\r\n            orderBy: { fecha: 'desc' }\r\n        });\r\n    } catch (error) {\r\n        console.error('Error en getAllHistoriales:', error);\r\n        throw new Error('Error al obtener historiales médicos');\r\n    }\r\n};\r\n\r\nexport const getHistorial = async (id: number): Promise<historialmedico | null> => {\r\n    try {\r\n        const historial = await prisma.historialmedico.findUnique({\r\n            where: { \r\n                cod_historial: id,\r\n                estado: true \r\n            },\r\n            include: {\r\n                \r\n                persona: true,\r\n                profesional: {\r\n                    select: {\r\n                        nombre: true,\r\n                        apellido: true,\r\n                        email: true\r\n                    }\r\n                },\r\n                diagnostico: true,\r\n                tratamiento: true,\r\n                examenes: true\r\n            }\r\n        });\r\n\r\n        if (!historial) throw new Error('Historial no encontrado');\r\n        return historial;\r\n    } catch (error) {\r\n        console.error('Error en getHistorial:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const createHistorial = async (data: {\r\n    descripcion?: string;\r\n    tipo_sangre?: string;\r\n    presion_arterial: string;\r\n    peso: number;\r\n    estatura: number;\r\n    temperatura?: number;\r\n    nivel_glucosa?: number;\r\n    fecha: Date;\r\n    profesional_id: number;\r\n    persona_id: number;\r\n}): Promise<historialmedico> => {\r\n    try {\r\n        const [profesional, paciente] = await Promise.all([\r\n            prisma.usuario.findUnique({\r\n                where: { cod_usuario: data.profesional_id }\r\n            }),\r\n            prisma.paciente.findUnique({\r\n                where: { cod_paciente: data.persona_id }\r\n            })\r\n        ]);\r\n\r\n        if (!profesional) throw new Error('Profesional no encontrado');\r\n        if (!paciente) throw new Error('Paciente no encontrado');\r\n\r\n        return await prisma.historialmedico.create({\r\n            data: {\r\n                ...data,\r\n                estado: true\r\n            },\r\n            include: {\r\n                profesional: true,\r\n                persona: true\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error('Error en createHistorial:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const updateHistorial = async (\r\n    id: number,\r\n    data: Partial<Omit<historialmedico, \"cod_historial\">>\r\n): Promise<historialmedico> => {\r\n    try {\r\n        const historial = await prisma.historialmedico.findUnique({\r\n            where: { cod_historial: id }\r\n        });\r\n\r\n        if (!historial || !historial.estado) {\r\n            throw new Error('Historial no encontrado');\r\n        }\r\n\r\n        return await prisma.historialmedico.update({\r\n            where: { cod_historial: id },\r\n            data,\r\n            include: {\r\n                profesional: true,\r\n                persona: true\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error('Error en updateHistorial:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const deleteHistorial = async (id: number): Promise<historialmedico> => {\r\n    try {\r\n        const historial = await prisma.historialmedico.findUnique({\r\n            where: { cod_historial: id }\r\n        });\r\n\r\n        if (!historial || !historial.estado) {\r\n            throw new Error('Historial no encontrado');\r\n        }\r\n\r\n        return await prisma.historialmedico.update({\r\n            where: { cod_historial: id },\r\n            data: { estado: false }\r\n        });\r\n    } catch (error) {\r\n        console.error('Error en deleteHistorial:', error);\r\n        throw error;\r\n    }\r\n};"],"names":[],"mappings":"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"}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/src/controller/HistorialController.ts"],"sourcesContent":["import { NextApiRequest, NextApiResponse } from \"next\";\r\nimport * as HistorialService from \"../service/HistorialServices\";\r\n\r\nexport const getHistoriales = async (req: NextApiRequest, res: NextApiResponse) => {\r\n    try {\r\n        const historiales = await HistorialService.getAllHistoriales();\r\n        return res.status(200).json(historiales);\r\n    } catch (error) {\r\n        console.error('Error en getHistoriales controller:', error);\r\n        return res.status(500).json({ error: \"Error al obtener historiales médicos\" });\r\n    }\r\n};\r\n\r\nexport const getHistorial = async (req: NextApiRequest, res: NextApiResponse) => {\r\n    try {\r\n        const { id } = req.query;\r\n        const historial = await HistorialService.getHistorial(Number(id));\r\n        return res.status(200).json(historial);\r\n    } catch (error) {\r\n        console.error('Error en getHistorial controller:', error);\r\n        return res.status(404).json({ error: \"Historial no encontrado\" });\r\n    }\r\n};\r\n\r\nexport const createHistorial = async (req: NextApiRequest, res: NextApiResponse) => {\r\n    try {\r\n        const {\r\n            descripcion,\r\n            tipo_sangre,\r\n            presion_arterial,\r\n            peso,\r\n            estatura,\r\n            temperatura,\r\n            nivel_glucosa,\r\n            fecha,\r\n            profesional_id,\r\n            persona_id\r\n        } = req.body;\r\n\r\n        // Validar campos obligatorios\r\n        if (!presion_arterial || !peso || !estatura || !fecha || !profesional_id || !persona_id) {\r\n            return res.status(400).json({\r\n                error: \"Faltan campos requeridos\",\r\n                details: \"presion_arterial, peso, estatura, fecha, profesional_id y persona_id son obligatorios\"\r\n            });\r\n        }\r\n\r\n        // Validar tipos de datos\r\n        if (isNaN(peso) || isNaN(estatura) || isNaN(profesional_id) || isNaN(persona_id)) {\r\n            return res.status(400).json({\r\n                error: \"Datos inválidos\",\r\n                details: \"peso, estatura, profesional_id y persona_id deben ser números válidos\"\r\n            });\r\n        }\r\n\r\n        // Crear historial\r\n        const newHistorial = await HistorialService.createHistorial({\r\n            descripcion,\r\n            tipo_sangre,\r\n            presion_arterial,\r\n            peso: Number(peso),\r\n            estatura: Number(estatura),\r\n            temperatura: temperatura ? Number(temperatura) : undefined,\r\n            nivel_glucosa: nivel_glucosa ? Number(nivel_glucosa) : undefined,\r\n            fecha: new Date(fecha),\r\n            profesional_id: Number(profesional_id),\r\n            persona_id: Number(persona_id)\r\n        });\r\n\r\n        return res.status(201).json(newHistorial);\r\n    } catch (error) {\r\n        console.error('Error en createHistorial controller:', error);\r\n        return res.status(400).json({\r\n            error: \"Error al crear historial médico\",\r\n            details: error instanceof Error ? error.message : \"Error desconocido\"\r\n        });\r\n    }\r\n};\r\n\r\nexport const updateHistorial = async (req: NextApiRequest, res: NextApiResponse) => {\r\n    try {\r\n        const { id } = req.query;\r\n        const historialId = Number(id);\r\n        const data = req.body;\r\n\r\n        const updatedHistorial = await HistorialService.updateHistorial(historialId, data);\r\n        return res.status(200).json(updatedHistorial);\r\n    } catch (error) {\r\n        console.error('Update Error:', error);\r\n        return res.status(500).json({ \r\n            error: 'Error al actualizar el historial médico',\r\n            details: process.env.NODE_ENV === 'development' ? error.message : undefined\r\n        });\r\n    }\r\n};\r\n\r\nexport const deleteHistorial = async (req: NextApiRequest, res: NextApiResponse) => {\r\n    try {\r\n        const { id } = req.query;\r\n        const historialId = Number(id);\r\n\r\n        await HistorialService.deleteHistorial(historialId);\r\n        return res.status(200).json({ \r\n            message: 'Historial médico eliminado correctamente' \r\n        });\r\n    } catch (error) {\r\n        console.error('Delete Error:', error);\r\n        return res.status(500).json({ \r\n            error: 'Error al eliminar el historial médico',\r\n            details: process.env.NODE_ENV === 'development' ? error.message : undefined\r\n        });\r\n    }\r\n};"],"names":[],"mappings":"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"}},
    {"offset": {"line": 288, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 302, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/src/lib/corsMiddleware.ts"],"sourcesContent":["import Cors from 'cors';\r\nimport { NextApiRequest, NextApiResponse } from 'next';\r\n\r\nconst cors = Cors({\r\n    methods: ['GET', 'HEAD', 'PUT', 'PATCH', 'POST', 'DELETE', 'OPTIONS'],\r\n    origin: ['http://localhost:5173', '*'], // Allow all origins\r\n    credentials: true,\r\n    optionsSuccessStatus: 200,\r\n    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],\r\n});\r\n\r\nfunction runMiddleware(req: NextApiRequest, res: NextApiResponse, fn: Function) {\r\n    return new Promise((resolve, reject) => {\r\n        fn(req, res, (result: any) => {\r\n            if (result instanceof Error) {\r\n                return reject(result);\r\n            }\r\n            return resolve(result);\r\n        });\r\n    });\r\n}\r\n\r\nconst corsMiddleware = async (req: NextApiRequest, res: NextApiResponse) => {\r\n    if (req.method === 'OPTIONS') {\r\n        try {\r\n            await runMiddleware(req, res, cors);\r\n            res.status(200).end();\r\n            return;\r\n        } catch (error) {\r\n            console.error('Error en OPTIONS:', error);\r\n            res.status(500).end();\r\n            return;\r\n        }\r\n    }\r\n    await runMiddleware(req, res, cors);\r\n};\r\n\r\nexport default corsMiddleware;"],"names":[],"mappings":";;;AAAA;;AAGA,MAAM,OAAO,CAAA,GAAA,iGAAA,CAAA,UAAI,AAAD,EAAE;IACd,SAAS;QAAC;QAAO;QAAQ;QAAO;QAAS;QAAQ;QAAU;KAAU;IACrE,QAAQ;QAAC;QAAyB;KAAI;IACtC,aAAa;IACb,sBAAsB;IACtB,gBAAgB;QAAC;QAAgB;QAAiB;KAAmB;AACzE;AAEA,SAAS,cAAc,GAAmB,EAAE,GAAoB,EAAE,EAAY;IAC1E,OAAO,IAAI,QAAQ,CAAC,SAAS;QACzB,GAAG,KAAK,KAAK,CAAC;YACV,IAAI,kBAAkB,OAAO;gBACzB,OAAO,OAAO;YAClB;YACA,OAAO,QAAQ;QACnB;IACJ;AACJ;AAEA,MAAM,iBAAiB,OAAO,KAAqB;IAC/C,IAAI,IAAI,MAAM,KAAK,WAAW;QAC1B,IAAI;YACA,MAAM,cAAc,KAAK,KAAK;YAC9B,IAAI,MAAM,CAAC,KAAK,GAAG;YACnB;QACJ,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,qBAAqB;YACnC,IAAI,MAAM,CAAC,KAAK,GAAG;YACnB;QACJ;IACJ;IACA,MAAM,cAAc,KAAK,KAAK;AAClC;uCAEe"}},
    {"offset": {"line": 354, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 360, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/src/pages/api/ApiHistorial.ts"],"sourcesContent":["import { NextApiRequest, NextApiResponse } from \"next\";\r\nimport * as HistorialController from \"@/controller/HistorialController\";\r\nimport corsMiddleware from \"../../lib/corsMiddleware\";\r\n\r\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\r\n    try {\r\n        await corsMiddleware(req, res);\r\n        if (req.method === 'OPTIONS') {\r\n            res.status(200).end();\r\n            return;\r\n        }\r\n        const { method } = req;\r\n        const { id } = req.query;\r\n        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n        res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n\r\n        switch (method) {\r\n            case \"GET\":\r\n                if (id) {\r\n                    return await HistorialController.getHistorial(req, res);\r\n                }\r\n                return await HistorialController.getHistoriales(req, res);\r\n\r\n            case \"POST\":\r\n                return await HistorialController.createHistorial(req, res);\r\n\r\n            case \"PUT\":\r\n                if (!id) {\r\n                    return res.status(400).json({ \r\n                        error: \"ID requerido para actualizar un historial\" \r\n                    });\r\n                }\r\n                return await HistorialController.updateHistorial(req, res);\r\n\r\n            case \"DELETE\":\r\n                if (!id) {\r\n                    return res.status(400).json({ \r\n                        error: \"ID requerido para eliminar un historial\" \r\n                    });\r\n                }\r\n                return await HistorialController.deleteHistorial(req, res);\r\n\r\n            default:\r\n                return res.status(405).json({ \r\n                    error: \"Método no permitido\",\r\n                    allowedMethods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS']\r\n                });\r\n        }\r\n    } catch (error) {\r\n        console.error('API Error:', error);\r\n        return res.status(500).json({ \r\n            error: 'Error interno del servidor',\r\n            details: process.env.NODE_ENV === 'development' ? error.message : undefined\r\n        });\r\n    }\r\n}"],"names":[],"mappings":";;;AACA;AACA;;;AAEe,eAAe,QAAQ,GAAmB,EAAE,GAAoB;IAC3E,IAAI;QACA,MAAM,CAAA,GAAA,qHAAA,CAAA,UAAc,AAAD,EAAE,KAAK;QAC1B,IAAI,IAAI,MAAM,KAAK,WAAW;YAC1B,IAAI,MAAM,CAAC,KAAK,GAAG;YACnB;QACJ;QACA,MAAM,EAAE,MAAM,EAAE,GAAG;QACnB,MAAM,EAAE,EAAE,EAAE,GAAG,IAAI,KAAK;QACxB,IAAI,SAAS,CAAC,gCAAgC;QAC9C,IAAI,SAAS,CAAC,gCAAgC;QAE9C,OAAQ;YACJ,KAAK;gBACD,IAAI,IAAI;oBACJ,OAAO,MAAM,kIAAoB,YAAY,CAAC,KAAK;gBACvD;gBACA,OAAO,MAAM,kIAAoB,cAAc,CAAC,KAAK;YAEzD,KAAK;gBACD,OAAO,MAAM,kIAAoB,eAAe,CAAC,KAAK;YAE1D,KAAK;gBACD,IAAI,CAAC,IAAI;oBACL,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;wBACxB,OAAO;oBACX;gBACJ;gBACA,OAAO,MAAM,kIAAoB,eAAe,CAAC,KAAK;YAE1D,KAAK;gBACD,IAAI,CAAC,IAAI;oBACL,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;wBACxB,OAAO;oBACX;gBACJ;gBACA,OAAO,MAAM,kIAAoB,eAAe,CAAC,KAAK;YAE1D;gBACI,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;oBACxB,OAAO;oBACP,gBAAgB;wBAAC;wBAAO;wBAAQ;wBAAO;wBAAU;qBAAU;gBAC/D;QACR;IACJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,cAAc;QAC5B,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YACxB,OAAO;YACP,SAAS,uCAAyC,MAAM,OAAO;QACnE;IACJ;AACJ"}},
    {"offset": {"line": 420, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 425, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/node_modules/next/dist/src/server/route-modules/pages-api/module.compiled.js"],"sourcesContent":["if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/pages-api/module.js')\n} else {\n  if (process.env.NODE_ENV === 'development') {\n    module.exports = require('next/dist/compiled/next-server/pages-api.runtime.dev.js')\n  } else if (process.env.TURBOPACK) {\n    module.exports = require('next/dist/compiled/next-server/pages-api-turbo.runtime.prod.js')\n  } else {\n    module.exports = require('next/dist/compiled/next-server/pages-api.runtime.prod.js')\n  }\n}\n"],"names":["process","env","NEXT_RUNTIME","module","exports","require","NODE_ENV","TURBOPACK"],"mappings":"AAAA,IAAIA,QAAQC,GAAG,CAACC,YAAY,KAAK,MAAQ;;AAEzC,OAAO;IACL,IAAIF,QAAQC,GAAG,CAACK,QAAQ,KAAK,WAAe;QAC1CH,OAAOC,OAAO,GAAGC,QAAQ;IAC3B,OAAO,IAAIL,QAAQC,GAAG,CAACM,SAAS,EAAE;;IAIlC;AACF","ignoreList":[0]}},
    {"offset": {"line": 434, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 440, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/node_modules/next/dist/src/server/route-kind.ts"],"sourcesContent":["export const enum RouteKind {\n  /**\n   * `PAGES` represents all the React pages that are under `pages/`.\n   */\n  PAGES = 'PAGES',\n  /**\n   * `PAGES_API` represents all the API routes under `pages/api/`.\n   */\n  PAGES_API = 'PAGES_API',\n  /**\n   * `APP_PAGE` represents all the React pages that are under `app/` with the\n   * filename of `page.{j,t}s{,x}`.\n   */\n  APP_PAGE = 'APP_PAGE',\n  /**\n   * `APP_ROUTE` represents all the API routes and metadata routes that are under `app/` with the\n   * filename of `route.{j,t}s{,x}`.\n   */\n  APP_ROUTE = 'APP_ROUTE',\n\n  /**\n   * `IMAGE` represents all the images that are generated by `next/image`.\n   */\n  IMAGE = 'IMAGE',\n}\n"],"names":["RouteKind"],"mappings":";;;AAAO,IAAWA,YAAAA,WAAAA,GAAAA,SAAAA,SAAAA;IAChB;;GAEC,GAAA,SAAA,CAAA,QAAA,GAAA;IAED;;GAEC,GAAA,SAAA,CAAA,YAAA,GAAA;IAED;;;GAGC,GAAA,SAAA,CAAA,WAAA,GAAA;IAED;;;GAGC,GAAA,SAAA,CAAA,YAAA,GAAA;IAGD;;GAEC,GAAA,SAAA,CAAA,QAAA,GAAA;WAtBeA;MAwBjB","ignoreList":[0]}},
    {"offset": {"line": 463, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 469, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/node_modules/next/dist/src/build/templates/helpers.ts"],"sourcesContent":["/**\n * Hoists a name from a module or promised module.\n *\n * @param module the module to hoist the name from\n * @param name the name to hoist\n * @returns the value on the module (or promised module)\n */\nexport function hoist(module: any, name: string) {\n  // If the name is available in the module, return it.\n  if (name in module) {\n    return module[name]\n  }\n\n  // If a property called `then` exists, assume it's a promise and\n  // return a promise that resolves to the name.\n  if ('then' in module && typeof module.then === 'function') {\n    return module.then((mod: any) => hoist(mod, name))\n  }\n\n  // If we're trying to hoise the default export, and the module is a function,\n  // return the module itself.\n  if (typeof module === 'function' && name === 'default') {\n    return module\n  }\n\n  // Otherwise, return undefined.\n  return undefined\n}\n"],"names":["hoist","module","name","then","mod","undefined"],"mappings":"AAAA;;;;;;CAMC,GACD;;;AAAO,SAASA,MAAMC,MAAW,EAAEC,IAAY;IAC7C,qDAAqD;IACrD,IAAIA,QAAQD,QAAQ;QAClB,OAAOA,MAAM,CAACC,KAAK;IACrB;IAEA,gEAAgE;IAChE,8CAA8C;IAC9C,IAAI,UAAUD,UAAU,OAAOA,OAAOE,IAAI,KAAK,YAAY;QACzD,OAAOF,OAAOE,IAAI,CAAC,CAACC,MAAaJ,MAAMI,KAAKF;IAC9C;IAEA,6EAA6E;IAC7E,4BAA4B;IAC5B,IAAI,OAAOD,WAAW,cAAcC,SAAS,WAAW;QACtD,OAAOD;IACT;IAEA,+BAA+B;IAC/B,OAAOI;AACT","ignoreList":[0]}},
    {"offset": {"line": 496, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 502, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/node_modules/next/dist/src/build/templates/pages-api.ts"],"sourcesContent":["import { PagesAPIRouteModule } from '../../server/route-modules/pages-api/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\n\nimport { hoist } from './helpers'\n\n// Import the userland code.\nimport * as userland from 'VAR_USERLAND'\n\n// Re-export the handler (should be the default export).\nexport default hoist(userland, 'default')\n\n// Re-export config.\nexport const config = hoist(userland, 'config')\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new PagesAPIRouteModule({\n  definition: {\n    kind: RouteKind.PAGES_API,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n  },\n  userland,\n})\n"],"names":["PagesAPIRouteModule","RouteKind","hoist","userland","config","routeModule","definition","kind","PAGES_API","page","pathname","bundlePath","filename"],"mappings":";;;;;AAAA,SAASA,mBAAmB,QAAQ,uDAAsD;AAC1F,SAASC,SAAS,QAAQ,0BAAyB;AAEnD,SAASC,KAAK,QAAQ,YAAW;AAEjC,4BAA4B;AAC5B,YAAYC,cAAc,eAAc;;;;;yMAGzBD,QAAAA,EAAMC,8HAAU,WAAU;AAGlC,MAAMC,2KAASF,QAAAA,EAAMC,8HAAU,UAAS;AAGxC,MAAME,cAAc,qMAAIL,sBAAAA,CAAoB;IACjDM,YAAY;QACVC,8JAAMN,YAAAA,CAAUO,SAAS;QACzBC,MAAM;QACNC,UAAU;QACV,2CAA2C;QAC3CC,YAAY;QACZC,UAAU;IACZ;cACAT;AACF,GAAE","ignoreList":[0]}},
    {"offset": {"line": 529, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}