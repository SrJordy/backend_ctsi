{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/src/lib/Prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport default prisma;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;uCAEhB"}},
    {"offset": {"line": 30, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/src/lib/validators.ts"],"sourcesContent":["export const validateEmail = (email: string): boolean => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n};\r\n\r\nexport const validatePhone = (phone: string): boolean => {\r\n    const phoneRegex = /^\\+?[\\d\\s-]{8,}$/;\r\n    return phoneRegex.test(phone);\r\n};\r\n"],"names":[],"mappings":";;;;AAAO,MAAM,gBAAgB,CAAC;IAC1B,MAAM,aAAa;IACnB,OAAO,WAAW,IAAI,CAAC;AAC3B;AAEO,MAAM,gBAAgB,CAAC;IAC1B,MAAM,aAAa;IACnB,OAAO,WAAW,IAAI,CAAC;AAC3B"}},
    {"offset": {"line": 48, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/src/service/UserService.ts"],"sourcesContent":["import prisma from \"@/lib/Prisma\";\r\nimport { usuario, Rol } from \"@prisma/client\";\r\nimport { IUserCreate, IUserUpdate, IUserSearch } from \"@/lib/user\";\r\nimport { validateEmail, validatePhone} from \"@/lib/validators\";\r\n\r\nexport class UserServiceError extends Error {\r\n    constructor(message: string, public code: string) {\r\n        super(message);\r\n        this.name = 'UserServiceError';\r\n    }\r\n}\r\n\r\nexport class UserService {\r\n    static async getAllUsers(options?: { \r\n        rol?: Rol, \r\n        includeRelations?: boolean \r\n    }): Promise<usuario[]> {\r\n        try {\r\n            return await prisma.usuario.findMany({\r\n                where: { \r\n                    estado: true,\r\n                    ...(options?.rol && { rol: options.rol })\r\n                },\r\n                ...(options?.includeRelations && {\r\n                    include: {\r\n                        paciente: true,\r\n                        citamedica: true,\r\n                        historialmedico: true,\r\n                        receta: true,\r\n                    }\r\n                })\r\n            });\r\n        } catch (error) {\r\n            throw new UserServiceError(\r\n                \"Error al obtener usuarios\",\r\n                \"FETCH_ERROR\"\r\n            );\r\n        }\r\n    }\r\n\r\n    static async getUser(criteria: IUserSearch): Promise<usuario | null> {\r\n        try {\r\n            const { id, nombre, apellido, CID, email } = criteria;\r\n\r\n            const user = await prisma.usuario.findFirst({\r\n                where: {\r\n                    OR: [\r\n                        { cod_usuario: id },\r\n                        { nombre: { contains: nombre, mode: 'insensitive' } },\r\n                        { apellido: { contains: apellido, mode: 'insensitive' } },\r\n                        { CID },\r\n                        { email },\r\n                    ].filter(Boolean),\r\n                    estado: true,\r\n                },\r\n                include: {\r\n                    paciente: true,\r\n                    citamedica: true,\r\n                    historialmedico: true,\r\n                    receta: true,\r\n                }\r\n            });\r\n\r\n            return user;\r\n        } catch (error) {\r\n            throw new UserServiceError(\r\n                \"Error al buscar usuario\",\r\n                \"SEARCH_ERROR\"\r\n            );\r\n        }\r\n    }\r\n\r\n    static async createUser(data: IUserCreate): Promise<usuario> {\r\n        try {\r\n            // Validaciones\r\n            if (!validateEmail(data.email)) {\r\n                throw new UserServiceError(\r\n                    \"Email inválido\",\r\n                    \"INVALID_EMAIL\"\r\n                );\r\n            }\r\n\r\n            if (!validatePhone(data.telefono)) {\r\n                throw new UserServiceError(\r\n                    \"Número de teléfono inválido\",\r\n                    \"INVALID_PHONE\"\r\n                );\r\n            }\r\n\r\n            // Verificar si ya existe un usuario con el mismo email o CID\r\n            const existingUser = await prisma.usuario.findFirst({\r\n                where: {\r\n                    OR: [\r\n                        { email: data.email },\r\n                        { CID: data.CID }\r\n                    ],\r\n                    estado: true\r\n                }\r\n            });\r\n\r\n            if (existingUser) {\r\n                throw new UserServiceError(\r\n                    \"Ya existe un usuario con ese email o CID\",\r\n                    \"DUPLICATE_USER\"\r\n                );\r\n            }\r\n\r\n            return await prisma.usuario.create({\r\n                data: {\r\n                    ...data,\r\n                    estado: true\r\n                }\r\n            });\r\n        } catch (error) {\r\n            if (error instanceof UserServiceError) throw error;\r\n            throw new UserServiceError(\r\n                \"Error al crear usuario\",\r\n                \"CREATE_ERROR\"\r\n            );\r\n        }\r\n    }\r\n\r\n    static async updateUser(id: number, data: IUserUpdate): Promise<usuario> {\r\n        try {\r\n            const existingUser = await prisma.usuario.findUnique({\r\n                where: { cod_usuario: id }\r\n            });\r\n\r\n            if (!existingUser || !existingUser.estado) {\r\n                throw new UserServiceError(\r\n                    \"Usuario no encontrado\",\r\n                    \"NOT_FOUND\"\r\n                );\r\n            }\r\n\r\n            if (data.email && !validateEmail(data.email)) {\r\n                throw new UserServiceError(\r\n                    \"Email inválido\",\r\n                    \"INVALID_EMAIL\"\r\n                );\r\n            }\r\n\r\n            if (data.telefono && !validatePhone(data.telefono)) {\r\n                throw new UserServiceError(\r\n                    \"Número de teléfono inválido\",\r\n                    \"INVALID_PHONE\"\r\n                );\r\n            }\r\n\r\n\r\n            if (data.email || data.CID) {\r\n                const duplicateUser = await prisma.usuario.findFirst({\r\n                    where: {\r\n                        OR: [\r\n                            data.email ? { email: data.email } : {},\r\n                            data.CID ? { CID: data.CID } : {}\r\n                        ],\r\n                        NOT: {\r\n                            cod_usuario: id\r\n                        },\r\n                        estado: true\r\n                    }\r\n                });\r\n\r\n                if (duplicateUser) {\r\n                    throw new UserServiceError(\r\n                        \"Ya existe un usuario con ese email o CID\",\r\n                        \"DUPLICATE_USER\"\r\n                    );\r\n                }\r\n            }\r\n\r\n            return await prisma.usuario.update({\r\n                where: { cod_usuario: id },\r\n                data\r\n            });\r\n        } catch (error) {\r\n            if (error instanceof UserServiceError) throw error;\r\n            throw new UserServiceError(\r\n                \"Error al actualizar usuario\",\r\n                \"UPDATE_ERROR\"\r\n            );\r\n        }\r\n    }\r\n\r\n    static async deleteUser(id: number): Promise<usuario> {\r\n        try {\r\n            const existingUser = await prisma.usuario.findUnique({\r\n                where: { cod_usuario: id }\r\n            });\r\n\r\n            if (!existingUser || !existingUser.estado) {\r\n                throw new UserServiceError(\r\n                    \"Usuario no encontrado\",\r\n                    \"NOT_FOUND\"\r\n                );\r\n            }\r\n\r\n            // Verificar si el usuario tiene relaciones activas\r\n            const hasActiveRelations = await this.checkActiveRelations(id);\r\n            if (hasActiveRelations) {\r\n                throw new UserServiceError(\r\n                    \"No se puede eliminar el usuario porque tiene registros asociados activos\",\r\n                    \"ACTIVE_RELATIONS\"\r\n                );\r\n            }\r\n\r\n            return await prisma.usuario.update({\r\n                where: { cod_usuario: id },\r\n                data: { estado: false }\r\n            });\r\n        } catch (error) {\r\n            if (error instanceof UserServiceError) throw error;\r\n            throw new UserServiceError(\r\n                \"Error al eliminar usuario\",\r\n                \"DELETE_ERROR\"\r\n            );\r\n        }\r\n    }\r\n\r\n    private static async checkActiveRelations(userId: number): Promise<boolean> {\r\n        const relations = await prisma.usuario.findUnique({\r\n            where: { cod_usuario: userId },\r\n            include: {\r\n                paciente: {\r\n                    where: { estado: true }\r\n                },\r\n                citamedica: {\r\n                    where: { status: true }\r\n                },\r\n                historialmedico: {\r\n                    where: { estado: true }\r\n                },\r\n                receta: true\r\n            }\r\n        });\r\n\r\n        return !!(\r\n            relations?.paciente.length ||\r\n            relations?.citamedica.length ||\r\n            relations?.historialmedico.length ||\r\n            relations?.receta.length\r\n        );\r\n    }\r\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 274, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 288, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/src/controller/UserController.ts"],"sourcesContent":["import { NextApiRequest, NextApiResponse } from \"next\";\r\nimport { UserService, UserServiceError } from '../service/UserService';\r\nimport bcrypt from 'bcryptjs';\r\nimport { Rol } from \"@prisma/client\";\r\n\r\nexport const getUsers = async (req: NextApiRequest, res: NextApiResponse) => {\r\n    try {\r\n        const { rol } = req.query;\r\n        const users = await UserService.getAllUsers({\r\n            rol: rol as Rol,\r\n            includeRelations: true  \r\n        });\r\n        return res.status(200).json(users);\r\n    } catch (error: any) {\r\n        return res.status(500).json({ \r\n            error: error.message,\r\n            code: error.code || 'UNKNOWN_ERROR'\r\n        });\r\n    }\r\n};\r\n\r\nexport const getUser = async (req: NextApiRequest, res: NextApiResponse) => {\r\n    try {\r\n        const { id, nombre, apellido, CID, email } = req.query;\r\n        const user = await UserService.getUser({\r\n            id: id ? Number(id) : undefined,\r\n            nombre: nombre ? String(nombre) : undefined,\r\n            apellido: apellido ? String(apellido) : undefined,\r\n            CID: CID ? Number(CID) : undefined,\r\n            email: email ? String(email) : undefined,\r\n        });\r\n\r\n        if (!user) {\r\n            return res.status(404).json({ \r\n                error: \"Usuario no encontrado\",\r\n                code: \"NOT_FOUND\"\r\n            });\r\n        }\r\n\r\n        return res.status(200).json(user);\r\n    } catch (error: any) {\r\n        return res.status(500).json({ \r\n            error: error.message,\r\n            code: error.code || 'UNKNOWN_ERROR'\r\n        });\r\n    }\r\n};\r\n\r\nexport const createUser = async (req: NextApiRequest, res: NextApiResponse) => {\r\n    try {\r\n        const { nombre, apellido, CID, telefono, email, rol, password } = req.body;\r\n        \r\n        if (!nombre || !apellido || !CID || !telefono || !email || !rol || !password) {\r\n            return res.status(400).json({ \r\n                error: \"Faltan datos requeridos\",\r\n                code: \"MISSING_DATA\"\r\n            });\r\n        }\r\n\r\n        const hashedPassword = await bcrypt.hash(password, 10);\r\n        const newUser = await UserService.createUser({\r\n            nombre,\r\n            apellido,\r\n            CID,\r\n            telefono,\r\n            email,\r\n            rol,\r\n            password: hashedPassword\r\n        });\r\n\r\n        return res.status(201).json(newUser);\r\n    } catch (error: any) {\r\n        if (error instanceof UserServiceError) {\r\n            return res.status(400).json({ \r\n                error: error.message,\r\n                code: error.code\r\n            });\r\n        }\r\n        return res.status(500).json({ \r\n            error: \"Error creando usuario\",\r\n            code: 'UNKNOWN_ERROR'\r\n        });\r\n    }\r\n};\r\n\r\nexport const updateUser = async (req: NextApiRequest, res: NextApiResponse) => {\r\n    try {\r\n        const { id } = req.query;\r\n        if (!id) {\r\n            return res.status(400).json({ \r\n                error: \"ID requerido\",\r\n                code: \"MISSING_ID\"\r\n            });\r\n        }\r\n\r\n        const { nombre, apellido, CID, telefono, email, rol, password } = req.body;\r\n        const updateData: any = {};\r\n\r\n        if (nombre) updateData.nombre = nombre;\r\n        if (apellido) updateData.apellido = apellido;\r\n        if (CID) updateData.CID = CID;\r\n        if (telefono) updateData.telefono = telefono;\r\n        if (email) updateData.email = email;\r\n        if (rol) updateData.rol = rol;\r\n        if (password) updateData.password = await bcrypt.hash(password, 10);\r\n\r\n        const updatedUser = await UserService.updateUser(Number(id), updateData);\r\n        return res.status(200).json(updatedUser);\r\n    } catch (error: any) {\r\n        if (error instanceof UserServiceError) {\r\n            return res.status(400).json({ \r\n                error: error.message,\r\n                code: error.code\r\n            });\r\n        }\r\n        return res.status(500).json({ \r\n            error: \"Error actualizando usuario\",\r\n            code: 'UNKNOWN_ERROR'\r\n        });\r\n    }\r\n};\r\n\r\nexport const deleteUser = async (req: NextApiRequest, res: NextApiResponse) => {\r\n    try {\r\n        const { id } = req.query;\r\n        if (!id) {\r\n            return res.status(400).json({ \r\n                error: \"ID requerido\",\r\n                code: \"MISSING_ID\"\r\n            });\r\n        }\r\n\r\n        const deletedUser = await UserService.deleteUser(Number(id));\r\n        return res.status(200).json({ \r\n            message: \"Usuario eliminado correctamente\",\r\n            usuario: deletedUser\r\n        });\r\n    } catch (error: any) {\r\n        if (error instanceof UserServiceError) {\r\n            return res.status(400).json({ \r\n                error: error.message,\r\n                code: error.code\r\n            });\r\n        }\r\n        return res.status(500).json({ \r\n            error: \"Error eliminando usuario\",\r\n            code: 'UNKNOWN_ERROR'\r\n        });\r\n    }\r\n};"],"names":[],"mappings":"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"}},
    {"offset": {"line": 431, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 445, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/src/lib/corsMiddleware.ts"],"sourcesContent":["import Cors from 'cors';\r\nimport { NextApiRequest, NextApiResponse } from 'next';\r\n\r\nconst cors = Cors({\r\n    methods: ['GET', 'HEAD', 'PUT', 'PATCH', 'POST', 'DELETE', 'OPTIONS'],\r\n    origin: ['http://localhost:5173', '*'], // Allow all origins\r\n    credentials: true,\r\n    optionsSuccessStatus: 200,\r\n    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],\r\n});\r\n\r\nfunction runMiddleware(req: NextApiRequest, res: NextApiResponse, fn: Function) {\r\n    return new Promise((resolve, reject) => {\r\n        fn(req, res, (result: any) => {\r\n            if (result instanceof Error) {\r\n                return reject(result);\r\n            }\r\n            return resolve(result);\r\n        });\r\n    });\r\n}\r\n\r\nconst corsMiddleware = async (req: NextApiRequest, res: NextApiResponse) => {\r\n    if (req.method === 'OPTIONS') {\r\n        try {\r\n            await runMiddleware(req, res, cors);\r\n            res.status(200).end();\r\n            return;\r\n        } catch (error) {\r\n            console.error('Error en OPTIONS:', error);\r\n            res.status(500).end();\r\n            return;\r\n        }\r\n    }\r\n    await runMiddleware(req, res, cors);\r\n};\r\n\r\nexport default corsMiddleware;"],"names":[],"mappings":";;;AAAA;;AAGA,MAAM,OAAO,CAAA,GAAA,iGAAA,CAAA,UAAI,AAAD,EAAE;IACd,SAAS;QAAC;QAAO;QAAQ;QAAO;QAAS;QAAQ;QAAU;KAAU;IACrE,QAAQ;QAAC;QAAyB;KAAI;IACtC,aAAa;IACb,sBAAsB;IACtB,gBAAgB;QAAC;QAAgB;QAAiB;KAAmB;AACzE;AAEA,SAAS,cAAc,GAAmB,EAAE,GAAoB,EAAE,EAAY;IAC1E,OAAO,IAAI,QAAQ,CAAC,SAAS;QACzB,GAAG,KAAK,KAAK,CAAC;YACV,IAAI,kBAAkB,OAAO;gBACzB,OAAO,OAAO;YAClB;YACA,OAAO,QAAQ;QACnB;IACJ;AACJ;AAEA,MAAM,iBAAiB,OAAO,KAAqB;IAC/C,IAAI,IAAI,MAAM,KAAK,WAAW;QAC1B,IAAI;YACA,MAAM,cAAc,KAAK,KAAK;YAC9B,IAAI,MAAM,CAAC,KAAK,GAAG;YACnB;QACJ,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,qBAAqB;YACnC,IAAI,MAAM,CAAC,KAAK,GAAG;YACnB;QACJ;IACJ;IACA,MAAM,cAAc,KAAK,KAAK;AAClC;uCAEe"}},
    {"offset": {"line": 497, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 503, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/src/pages/api/ApiUser.ts"],"sourcesContent":["import { NextApiRequest, NextApiResponse } from \"next\";\r\nimport * as UserController from \"@/controller/UserController\";\r\nimport corsMiddleware from \"@/lib/corsMiddleware\";\r\n\r\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\r\n    try {\r\n        await corsMiddleware(req, res);\r\n        const { method } = req;\r\n        const { id, nombre, apellido, CID, telefono, email } = req.query;\r\n\r\n        switch (method) {\r\n            case \"GET\":\r\n                if (!id && !nombre && !apellido && !CID && !telefono && !email) {\r\n                    return await UserController.getUsers(req, res);\r\n                } else {\r\n                    return await UserController.getUser(req, res);\r\n                }\r\n\r\n            case \"POST\":\r\n                return await UserController.createUser(req, res);\r\n\r\n            case \"PUT\":\r\n                if (!id) {\r\n                    return res.status(400).json({ \r\n                        error: \"El ID es requerido para realizar la actualización\",\r\n                        code: \"MISSING_ID\"\r\n                    });\r\n                }\r\n                return await UserController.updateUser(req, res);\r\n\r\n            case \"DELETE\":\r\n                if (!id) {\r\n                    return res.status(400).json({ \r\n                        error: \"El ID es requerido para eliminar un usuario\",\r\n                        code: \"MISSING_ID\"\r\n                    });\r\n                }\r\n                return await UserController.deleteUser(req, res);\r\n\r\n            default:\r\n                return res.status(405).json({ \r\n                    error: \"Método no permitido\",\r\n                    code: \"METHOD_NOT_ALLOWED\"\r\n                });\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error en la API handler:\", error);\r\n        return res.status(500).json({ \r\n            error: \"Error interno del servidor\",\r\n            code: \"INTERNAL_SERVER_ERROR\"\r\n        });\r\n    }\r\n}"],"names":[],"mappings":";;;AACA;AACA;;;AAEe,eAAe,QAAQ,GAAmB,EAAE,GAAoB;IAC3E,IAAI;QACA,MAAM,CAAA,GAAA,qHAAA,CAAA,UAAc,AAAD,EAAE,KAAK;QAC1B,MAAM,EAAE,MAAM,EAAE,GAAG;QACnB,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,IAAI,KAAK;QAEhE,OAAQ;YACJ,KAAK;gBACD,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,OAAO,CAAC,YAAY,CAAC,OAAO;oBAC5D,OAAO,MAAM,6HAAe,QAAQ,CAAC,KAAK;gBAC9C,OAAO;oBACH,OAAO,MAAM,6HAAe,OAAO,CAAC,KAAK;gBAC7C;YAEJ,KAAK;gBACD,OAAO,MAAM,6HAAe,UAAU,CAAC,KAAK;YAEhD,KAAK;gBACD,IAAI,CAAC,IAAI;oBACL,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;wBACxB,OAAO;wBACP,MAAM;oBACV;gBACJ;gBACA,OAAO,MAAM,6HAAe,UAAU,CAAC,KAAK;YAEhD,KAAK;gBACD,IAAI,CAAC,IAAI;oBACL,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;wBACxB,OAAO;wBACP,MAAM;oBACV;gBACJ;gBACA,OAAO,MAAM,6HAAe,UAAU,CAAC,KAAK;YAEhD;gBACI,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;oBACxB,OAAO;oBACP,MAAM;gBACV;QACR;IACJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YACxB,OAAO;YACP,MAAM;QACV;IACJ;AACJ"}},
    {"offset": {"line": 554, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 559, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/node_modules/next/dist/src/server/route-modules/pages-api/module.compiled.js"],"sourcesContent":["if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/pages-api/module.js')\n} else {\n  if (process.env.NODE_ENV === 'development') {\n    module.exports = require('next/dist/compiled/next-server/pages-api.runtime.dev.js')\n  } else if (process.env.TURBOPACK) {\n    module.exports = require('next/dist/compiled/next-server/pages-api-turbo.runtime.prod.js')\n  } else {\n    module.exports = require('next/dist/compiled/next-server/pages-api.runtime.prod.js')\n  }\n}\n"],"names":["process","env","NEXT_RUNTIME","module","exports","require","NODE_ENV","TURBOPACK"],"mappings":"AAAA,IAAIA,QAAQC,GAAG,CAACC,YAAY,KAAK,MAAQ;;AAEzC,OAAO;IACL,IAAIF,QAAQC,GAAG,CAACK,QAAQ,KAAK,WAAe;QAC1CH,OAAOC,OAAO,GAAGC,QAAQ;IAC3B,OAAO,IAAIL,QAAQC,GAAG,CAACM,SAAS,EAAE;;IAIlC;AACF","ignoreList":[0]}},
    {"offset": {"line": 568, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 574, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/node_modules/next/dist/src/server/route-kind.ts"],"sourcesContent":["export const enum RouteKind {\n  /**\n   * `PAGES` represents all the React pages that are under `pages/`.\n   */\n  PAGES = 'PAGES',\n  /**\n   * `PAGES_API` represents all the API routes under `pages/api/`.\n   */\n  PAGES_API = 'PAGES_API',\n  /**\n   * `APP_PAGE` represents all the React pages that are under `app/` with the\n   * filename of `page.{j,t}s{,x}`.\n   */\n  APP_PAGE = 'APP_PAGE',\n  /**\n   * `APP_ROUTE` represents all the API routes and metadata routes that are under `app/` with the\n   * filename of `route.{j,t}s{,x}`.\n   */\n  APP_ROUTE = 'APP_ROUTE',\n\n  /**\n   * `IMAGE` represents all the images that are generated by `next/image`.\n   */\n  IMAGE = 'IMAGE',\n}\n"],"names":["RouteKind"],"mappings":";;;AAAO,IAAWA,YAAAA,WAAAA,GAAAA,SAAAA,SAAAA;IAChB;;GAEC,GAAA,SAAA,CAAA,QAAA,GAAA;IAED;;GAEC,GAAA,SAAA,CAAA,YAAA,GAAA;IAED;;;GAGC,GAAA,SAAA,CAAA,WAAA,GAAA;IAED;;;GAGC,GAAA,SAAA,CAAA,YAAA,GAAA;IAGD;;GAEC,GAAA,SAAA,CAAA,QAAA,GAAA;WAtBeA;MAwBjB","ignoreList":[0]}},
    {"offset": {"line": 597, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 603, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/node_modules/next/dist/src/build/templates/helpers.ts"],"sourcesContent":["/**\n * Hoists a name from a module or promised module.\n *\n * @param module the module to hoist the name from\n * @param name the name to hoist\n * @returns the value on the module (or promised module)\n */\nexport function hoist(module: any, name: string) {\n  // If the name is available in the module, return it.\n  if (name in module) {\n    return module[name]\n  }\n\n  // If a property called `then` exists, assume it's a promise and\n  // return a promise that resolves to the name.\n  if ('then' in module && typeof module.then === 'function') {\n    return module.then((mod: any) => hoist(mod, name))\n  }\n\n  // If we're trying to hoise the default export, and the module is a function,\n  // return the module itself.\n  if (typeof module === 'function' && name === 'default') {\n    return module\n  }\n\n  // Otherwise, return undefined.\n  return undefined\n}\n"],"names":["hoist","module","name","then","mod","undefined"],"mappings":"AAAA;;;;;;CAMC,GACD;;;AAAO,SAASA,MAAMC,MAAW,EAAEC,IAAY;IAC7C,qDAAqD;IACrD,IAAIA,QAAQD,QAAQ;QAClB,OAAOA,MAAM,CAACC,KAAK;IACrB;IAEA,gEAAgE;IAChE,8CAA8C;IAC9C,IAAI,UAAUD,UAAU,OAAOA,OAAOE,IAAI,KAAK,YAAY;QACzD,OAAOF,OAAOE,IAAI,CAAC,CAACC,MAAaJ,MAAMI,KAAKF;IAC9C;IAEA,6EAA6E;IAC7E,4BAA4B;IAC5B,IAAI,OAAOD,WAAW,cAAcC,SAAS,WAAW;QACtD,OAAOD;IACT;IAEA,+BAA+B;IAC/B,OAAOI;AACT","ignoreList":[0]}},
    {"offset": {"line": 630, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 636, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/node_modules/next/dist/src/build/templates/pages-api.ts"],"sourcesContent":["import { PagesAPIRouteModule } from '../../server/route-modules/pages-api/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\n\nimport { hoist } from './helpers'\n\n// Import the userland code.\nimport * as userland from 'VAR_USERLAND'\n\n// Re-export the handler (should be the default export).\nexport default hoist(userland, 'default')\n\n// Re-export config.\nexport const config = hoist(userland, 'config')\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new PagesAPIRouteModule({\n  definition: {\n    kind: RouteKind.PAGES_API,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n  },\n  userland,\n})\n"],"names":["PagesAPIRouteModule","RouteKind","hoist","userland","config","routeModule","definition","kind","PAGES_API","page","pathname","bundlePath","filename"],"mappings":";;;;;AAAA,SAASA,mBAAmB,QAAQ,uDAAsD;AAC1F,SAASC,SAAS,QAAQ,0BAAyB;AAEnD,SAASC,KAAK,QAAQ,YAAW;AAEjC,4BAA4B;AAC5B,YAAYC,cAAc,eAAc;;;;;yMAGzBD,QAAAA,EAAMC,yHAAU,WAAU;AAGlC,MAAMC,2KAASF,QAAAA,EAAMC,yHAAU,UAAS;AAGxC,MAAME,cAAc,qMAAIL,sBAAAA,CAAoB;IACjDM,YAAY;QACVC,8JAAMN,YAAAA,CAAUO,SAAS;QACzBC,MAAM;QACNC,UAAU;QACV,2CAA2C;QAC3CC,YAAY;QACZC,UAAU;IACZ;cACAT;AACF,GAAE","ignoreList":[0]}},
    {"offset": {"line": 663, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}