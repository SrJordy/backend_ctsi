{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/src/lib/Prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport default prisma;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;uCAEhB"}},
    {"offset": {"line": 30, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/src/lib/paciente.ts"],"sourcesContent":["export interface ICreatePacienteInput {\r\n    nombre: string;\r\n    apellido: string;\r\n    CID: number;\r\n    telefono: string;\r\n    fecha_nac: Date;\r\n    genero: string;\r\n    direccion?: string;\r\n    cuidador_id: number;\r\n}\r\n\r\nexport interface IUpdatePacienteInput extends Partial<ICreatePacienteInput> {}\r\n\r\nexport interface IPacienteSearch {\r\n    id?: number;\r\n    CID?: number;\r\n    nombre?: string;\r\n    apellido?: string;\r\n    cuidador_id?: number;\r\n}\r\n\r\nexport class PacienteServiceError extends Error {\r\n    code: string;\r\n    constructor(message: string, code: string) {\r\n        super(message);\r\n        this.code = code;\r\n        this.name = 'PacienteServiceError';\r\n    }\r\n}"],"names":[],"mappings":";;;AAqBO,MAAM,6BAA6B;IACtC,KAAa;IACb,YAAY,OAAe,EAAE,IAAY,CAAE;QACvC,KAAK,CAAC;QACN,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,IAAI,GAAG;IAChB;AACJ"}},
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/src/lib/validators.ts"],"sourcesContent":["import { ICreatePacienteInput } from \"../lib/paciente\";\r\nlet fechaNac: Date;\r\n\r\nexport const validateEmail = (email: string): boolean => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n};\r\n\r\nexport const validatePhone = (phone: string): boolean => {\r\n    const phoneRegex = /^\\+?[\\d\\s-]{8,}$/;\r\n    return phoneRegex.test(phone);\r\n};\r\n\r\n\r\nexport const validateCID = (CID: number): boolean => {\r\n    return CID.toString().length === 10;\r\n};\r\n\r\nexport const validateAge = (birthDate: Date): boolean => {\r\n    const today = new Date();\r\n    const age = today.getFullYear() - birthDate.getFullYear();\r\n    return age >= 0 && age <= 120;\r\n};\r\n\r\nexport const validatePacienteData = (data: ICreatePacienteInput) => {\r\n    \r\n    if (!data.nombre || !data.apellido || !data.CID || !data.telefono || !data.fecha_nac || !data.genero || !data.cuidador_id) {\r\n        throw new Error(\"Faltan campos requeridos\");\r\n    }\r\n\r\n    if (!/^\\d{10}$/.test(data.CID.toString())) {\r\n        throw new Error(\"El CID debe tener 10 dígitos\");\r\n    }\r\n\r\n    if (!/^\\+?[1-9]\\d{1,14}$/.test(data.telefono)) {\r\n        throw new Error(\"Formato de teléfono inválido\");\r\n    }\r\n\r\n    if (typeof data.fecha_nac === 'string') {\r\n        fechaNac = new Date(data.fecha_nac);\r\n        if (data.fecha_nac.length === 10) {\r\n            fechaNac = new Date(data.fecha_nac + 'T00:00:00.000Z');\r\n        }\r\n    } else if (data.fecha_nac instanceof Date) {\r\n        fechaNac = data.fecha_nac;\r\n    } else {\r\n        throw new Error(\"Formato de fecha inválido\");\r\n    }\r\n\r\n    let fechaNac = new Date(data.fecha_nac);\r\n    if (isNaN(fechaNac.getTime())) {\r\n        throw new Error(\"Fecha de nacimiento inválida\");\r\n    }\r\n\r\n    data.fecha_nac = fechaNac;\r\n\r\n    if (fechaNac > new Date()) {\r\n        throw new Error(\"La fecha de nacimiento no puede ser futura\");\r\n    }\r\n\r\n    const edadMaxima = new Date();\r\n    edadMaxima.setFullYear(edadMaxima.getFullYear() - 120);\r\n    if (fechaNac < edadMaxima) {\r\n        throw new Error(\"La fecha de nacimiento es demasiado antigua\");\r\n    }\r\n\r\n    if (!/^[A-Za-zÁáÉéÍíÓóÚúÑñ\\s]+$/.test(data.nombre)) {\r\n        throw new Error(\"El nombre solo debe contener letras y espacios\");\r\n    }\r\n\r\n    if (!/^[A-Za-zÁáÉéÍíÓóÚúÑñ\\s]+$/.test(data.apellido)) {\r\n        throw new Error(\"El apellido solo debe contener letras y espacios\");\r\n    }\r\n};"],"names":[],"mappings":";;;;;;;AACA,IAAI;AAEG,MAAM,gBAAgB,CAAC;IAC1B,MAAM,aAAa;IACnB,OAAO,WAAW,IAAI,CAAC;AAC3B;AAEO,MAAM,gBAAgB,CAAC;IAC1B,MAAM,aAAa;IACnB,OAAO,WAAW,IAAI,CAAC;AAC3B;AAGO,MAAM,cAAc,CAAC;IACxB,OAAO,IAAI,QAAQ,GAAG,MAAM,KAAK;AACrC;AAEO,MAAM,cAAc,CAAC;IACxB,MAAM,QAAQ,IAAI;IAClB,MAAM,MAAM,MAAM,WAAW,KAAK,UAAU,WAAW;IACvD,OAAO,OAAO,KAAK,OAAO;AAC9B;AAEO,MAAM,uBAAuB,CAAC;IAEjC,IAAI,CAAC,KAAK,MAAM,IAAI,CAAC,KAAK,QAAQ,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,QAAQ,IAAI,CAAC,KAAK,SAAS,IAAI,CAAC,KAAK,MAAM,IAAI,CAAC,KAAK,WAAW,EAAE;QACvH,MAAM,IAAI,MAAM;IACpB;IAEA,IAAI,CAAC,WAAW,IAAI,CAAC,KAAK,GAAG,CAAC,QAAQ,KAAK;QACvC,MAAM,IAAI,MAAM;IACpB;IAEA,IAAI,CAAC,qBAAqB,IAAI,CAAC,KAAK,QAAQ,GAAG;QAC3C,MAAM,IAAI,MAAM;IACpB;IAEA,IAAI,OAAO,KAAK,SAAS,KAAK,UAAU;QACpC,WAAW,IAAI,KAAK,KAAK,SAAS;QAClC,IAAI,KAAK,SAAS,CAAC,MAAM,KAAK,IAAI;YAC9B,WAAW,IAAI,KAAK,KAAK,SAAS,GAAG;QACzC;IACJ,OAAO,IAAI,KAAK,SAAS,YAAY,MAAM;QACvC,WAAW,KAAK,SAAS;IAC7B,OAAO;QACH,MAAM,IAAI,MAAM;IACpB;IAEA,IAAI,WAAW,IAAI,KAAK,KAAK,SAAS;IACtC,IAAI,MAAM,SAAS,OAAO,KAAK;QAC3B,MAAM,IAAI,MAAM;IACpB;IAEA,KAAK,SAAS,GAAG;IAEjB,IAAI,WAAW,IAAI,QAAQ;QACvB,MAAM,IAAI,MAAM;IACpB;IAEA,MAAM,aAAa,IAAI;IACvB,WAAW,WAAW,CAAC,WAAW,WAAW,KAAK;IAClD,IAAI,WAAW,YAAY;QACvB,MAAM,IAAI,MAAM;IACpB;IAEA,IAAI,CAAC,4BAA4B,IAAI,CAAC,KAAK,MAAM,GAAG;QAChD,MAAM,IAAI,MAAM;IACpB;IAEA,IAAI,CAAC,4BAA4B,IAAI,CAAC,KAAK,QAAQ,GAAG;QAClD,MAAM,IAAI,MAAM;IACpB;AACJ"}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/src/service/PacienteService.ts"],"sourcesContent":["import prisma from \"@/lib/Prisma\";\r\nimport { paciente, Prisma } from \"@prisma/client\";\r\nimport { ICreatePacienteInput, IUpdatePacienteInput, IPacienteSearch, PacienteServiceError } from \"../lib/paciente\";\r\nimport { validatePacienteData } from \"../lib/validators\";\r\n\r\nexport class PacienteService {\r\n    static async getAllPacientes(options?: { \r\n        includeInactive?: boolean,\r\n        cuidadorId?: number,\r\n        page?: number,\r\n        limit?: number,\r\n        orderBy?: 'nombre' | 'apellido' | 'fecha_nac'\r\n    }): Promise<{ pacientes: paciente[], total: number }> {\r\n        try {\r\n            const skip = options?.page && options?.limit ? (options.page - 1) * options.limit : undefined;\r\n            const take = options?.limit;\r\n\r\n            const [pacientes, total] = await Promise.all([\r\n                prisma.paciente.findMany({\r\n                    where: {\r\n                        estado: options?.includeInactive ? undefined : true,\r\n                        cuidador_id: options?.cuidadorId\r\n                    },\r\n                    include: {\r\n                        cuidador: true,\r\n                        historialmedico: true,\r\n                        citamedica: {\r\n                            where: {\r\n                                status: true\r\n                            }\r\n                        }\r\n                    },\r\n                    skip,\r\n                    take,\r\n                    orderBy: options?.orderBy ? { [options.orderBy]: 'asc' } : undefined\r\n                }),\r\n                prisma.paciente.count({\r\n                    where: {\r\n                        estado: options?.includeInactive ? undefined : true,\r\n                        cuidador_id: options?.cuidadorId\r\n                    }\r\n                })\r\n            ]);\r\n\r\n            return { pacientes, total };\r\n        } catch (error) {\r\n            throw new PacienteServiceError(\r\n                \"Error al obtener pacientes\",\r\n                \"FETCH_ERROR\"\r\n            );\r\n        }\r\n    }\r\n\r\n    static async getPaciente(criteria: IPacienteSearch): Promise<paciente | null> {\r\n        try {\r\n            const { id, CID, nombre, apellido, cuidador_id } = criteria;\r\n\r\n            return await prisma.paciente.findFirst({\r\n                where: {\r\n                    OR: [\r\n                        { cod_paciente: id },\r\n                        { CID },\r\n                        { nombre: { contains: nombre, mode: 'insensitive' } },\r\n                        { apellido: { contains: apellido, mode: 'insensitive' } },\r\n                        { cuidador_id }\r\n                    ].filter(Boolean),\r\n                    estado: true,\r\n                },\r\n                include: {\r\n                    cuidador: true,\r\n                    historialmedico: true,\r\n                    citamedica: {\r\n                        where: {\r\n                            status: true\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        } catch (error) {\r\n            throw new PacienteServiceError(\r\n                \"Error al buscar paciente\",\r\n                \"SEARCH_ERROR\"\r\n            );\r\n        }\r\n    }\r\n\r\n    static async createPaciente(data: ICreatePacienteInput): Promise<paciente> {\r\n        try {\r\n            if (typeof data.fecha_nac === 'string') {\r\n                if (data.fecha_nac.length === 10) {\r\n                    data.fecha_nac = new Date(data.fecha_nac + 'T00:00:00.000Z');\r\n                } else {\r\n                    data.fecha_nac = new Date(data.fecha_nac);\r\n                }\r\n            }\r\n\r\n            validatePacienteData(data);\r\n\r\n            const existingPaciente = await prisma.paciente.findFirst({\r\n                where: { CID: data.CID, estado: true }\r\n            });\r\n\r\n            if (existingPaciente) {\r\n                throw new PacienteServiceError(\r\n                    \"Ya existe un paciente con este CID\",\r\n                    \"DUPLICATE_CID\"\r\n                );\r\n            }\r\n\r\n            const cuidador = await prisma.usuario.findFirst({\r\n                where: { cod_usuario: data.cuidador_id, estado: true }\r\n            });\r\n\r\n            if (!cuidador) {\r\n                throw new PacienteServiceError(\r\n                    \"El cuidador especificado no existe\",\r\n                    \"INVALID_CUIDADOR\"\r\n                );\r\n            }\r\n\r\n            return await prisma.paciente.create({\r\n                data: {\r\n                    ...data,\r\n                    estado: true\r\n                },\r\n                include: {\r\n                    cuidador: true\r\n                }\r\n            });\r\n        } catch (error) {\r\n            if (error instanceof PacienteServiceError) throw error;\r\n            throw new PacienteServiceError(\r\n                \"Error al crear paciente\",\r\n                \"CREATE_ERROR\"\r\n            );\r\n        }\r\n    }\r\n\r\n    static async updatePaciente(\r\n        id: number,\r\n        data: IUpdatePacienteInput\r\n    ): Promise<paciente> {\r\n        try {\r\n            const existingPaciente = await prisma.paciente.findUnique({\r\n                where: { cod_paciente: id }\r\n            });\r\n\r\n            if (!existingPaciente || !existingPaciente.estado) {\r\n                throw new PacienteServiceError(\r\n                    \"Paciente no encontrado o inactivo\",\r\n                    \"NOT_FOUND\"\r\n                );\r\n            }\r\n\r\n            if (data.CID) {\r\n                const duplicateCID = await prisma.paciente.findFirst({\r\n                    where: {\r\n                        CID: data.CID,\r\n                        cod_paciente: { not: id },\r\n                        estado: true\r\n                    }\r\n                });\r\n\r\n                if (duplicateCID) {\r\n                    throw new PacienteServiceError(\r\n                        \"Ya existe otro paciente con este CID\",\r\n                        \"DUPLICATE_CID\"\r\n                    );\r\n                }\r\n            }\r\n\r\n            if (data.cuidador_id) {\r\n                const cuidador = await prisma.usuario.findFirst({\r\n                    where: { cod_usuario: data.cuidador_id, estado: true }\r\n                });\r\n\r\n                if (!cuidador) {\r\n                    throw new PacienteServiceError(\r\n                        \"El cuidador especificado no existe\",\r\n                        \"INVALID_CUIDADOR\"\r\n                    );\r\n                }\r\n            }\r\n\r\n            return await prisma.paciente.update({\r\n                where: { cod_paciente: id },\r\n                data,\r\n                include: {\r\n                    cuidador: true\r\n                }\r\n            });\r\n        } catch (error) {\r\n            if (error instanceof PacienteServiceError) throw error;\r\n            throw new PacienteServiceError(\r\n                \"Error al actualizar paciente\",\r\n                \"UPDATE_ERROR\"\r\n            );\r\n        }\r\n    }\r\n\r\n    static async deletePaciente(id: number): Promise<paciente> {\r\n        try {\r\n            const existingPaciente = await prisma.paciente.findUnique({\r\n                where: { cod_paciente: id },\r\n                include: {\r\n                    citamedica: {\r\n                        where: {\r\n                            status: true\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (!existingPaciente || !existingPaciente.estado) {\r\n                throw new PacienteServiceError(\r\n                    \"Paciente no encontrado o ya está inactivo\",\r\n                    \"NOT_FOUND\"\r\n                );\r\n            }\r\n\r\n            if (existingPaciente.citamedica.length > 0) {\r\n                throw new PacienteServiceError(\r\n                    \"No se puede eliminar el paciente porque tiene citas médicas activas\",\r\n                    \"ACTIVE_APPOINTMENTS\"\r\n                );\r\n            }\r\n\r\n            return await prisma.paciente.update({\r\n                where: { cod_paciente: id },\r\n                data: { estado: false },\r\n                include: {\r\n                    cuidador: true\r\n                }\r\n            });\r\n        } catch (error) {\r\n            if (error instanceof PacienteServiceError) throw error;\r\n            throw new PacienteServiceError(\r\n                \"Error al eliminar paciente\",\r\n                \"DELETE_ERROR\"\r\n            );\r\n        }\r\n    }\r\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 345, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 351, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/src/controller/PacienteController.ts"],"sourcesContent":["import { NextApiRequest, NextApiResponse } from \"next\";\r\nimport { PacienteService } from \"../service/PacienteService\";\r\nimport { PacienteServiceError } from \"../lib/paciente\";\r\n\r\nexport class PacienteController {\r\n    static async getPacientes(req: NextApiRequest, res: NextApiResponse) {\r\n        try {\r\n            const {\r\n                includeInactive,\r\n                cuidadorId,\r\n                page,\r\n                limit,\r\n                orderBy\r\n            } = req.query;\r\n\r\n            const result = await PacienteService.getAllPacientes({\r\n                includeInactive: includeInactive === 'true',\r\n                cuidadorId: cuidadorId ? Number(cuidadorId) : undefined,\r\n                page: page ? Number(page) : undefined,\r\n                limit: limit ? Number(limit) : undefined,\r\n                orderBy: orderBy as 'nombre' | 'apellido' | 'fecha_nac'\r\n            });\r\n\r\n            return res.status(200).json(result);\r\n        } catch (error) {\r\n            console.error(\"Error en getPacientes:\", error);\r\n            if (error instanceof PacienteServiceError) {\r\n                return res.status(400).json({\r\n                    error: error.message,\r\n                    code: error.code\r\n                });\r\n            }\r\n            return res.status(500).json({\r\n                error: \"Error interno del servidor\",\r\n                code: \"INTERNAL_ERROR\"\r\n            });\r\n        }\r\n    }\r\n\r\n    static async getPaciente(req: NextApiRequest, res: NextApiResponse) {\r\n        try {\r\n            const { id, CID, nombre, apellido, cuidador_id } = req.query;\r\n\r\n            const paciente = await PacienteService.getPaciente({\r\n                id: id ? Number(id) : undefined,\r\n                CID: CID ? Number(CID) : undefined,\r\n                nombre: nombre ? String(nombre) : undefined,\r\n                apellido: apellido ? String(apellido) : undefined,\r\n                cuidador_id: cuidador_id ? Number(cuidador_id) : undefined\r\n            });\r\n\r\n            if (!paciente) {\r\n                return res.status(404).json({\r\n                    error: \"Paciente no encontrado\",\r\n                    code: \"NOT_FOUND\"\r\n                });\r\n            }\r\n\r\n            return res.status(200).json(paciente);\r\n        } catch (error) {\r\n            console.error(\"Error en getPaciente:\", error);\r\n            if (error instanceof PacienteServiceError) {\r\n                return res.status(400).json({\r\n                    error: error.message,\r\n                    code: error.code\r\n                });\r\n            }\r\n            return res.status(500).json({\r\n                error: \"Error interno del servidor\",\r\n                code: \"INTERNAL_ERROR\"\r\n            });\r\n        }\r\n    }\r\n\r\n    static async createPaciente(req: NextApiRequest, res: NextApiResponse) {\r\n        try {\r\n            const data = req.body;\r\n            if (typeof data.fecha_nac === 'string') {\r\n                // Verificar si es una fecha válida\r\n                const fechaNac = new Date(data.fecha_nac);\r\n                if (isNaN(fechaNac.getTime())) {\r\n                    return res.status(400).json({\r\n                        error: \"Formato de fecha inválido\",\r\n                        code: \"INVALID_DATE_FORMAT\"\r\n                    });\r\n                }\r\n            }\r\n            const paciente = await PacienteService.createPaciente(data);\r\n            return res.status(201).json(paciente);\r\n        } catch (error) {\r\n            console.error(\"Error en createPaciente:\", error);\r\n            if (error instanceof PacienteServiceError) {\r\n                return res.status(400).json({\r\n                    error: error.message,\r\n                    code: error.code\r\n                });\r\n            }\r\n            return res.status(500).json({\r\n                error: \"Error interno del servidor\",\r\n                code: \"INTERNAL_ERROR\"\r\n            });\r\n        }\r\n    }\r\n\r\n    static async updatePaciente(req: NextApiRequest, res: NextApiResponse) {\r\n        try {\r\n            const { id } = req.query;\r\n            if (!id) {\r\n                return res.status(400).json({\r\n                    error: \"ID requerido\",\r\n                    code: \"MISSING_ID\"\r\n                });\r\n            }\r\n\r\n            const paciente = await PacienteService.updatePaciente(\r\n                Number(id),\r\n                req.body\r\n            );\r\n\r\n            return res.status(200).json(paciente);\r\n        } catch (error) {\r\n            console.error(\"Error en updatePaciente:\", error);\r\n            if (error instanceof PacienteServiceError) {\r\n                return res.status(400).json({\r\n                    error: error.message,\r\n                    code: error.code\r\n                });\r\n            }\r\n            return res.status(500).json({\r\n                error: \"Error interno del servidor\",\r\n                code: \"INTERNAL_ERROR\"\r\n            });\r\n        }\r\n    }\r\n\r\n    static async deletePaciente(req: NextApiRequest, res: NextApiResponse) {\r\n        try {\r\n            const { id } = req.query;\r\n            if (!id) {\r\n                return res.status(400).json({\r\n                    error: \"ID requerido\",\r\n                    code: \"MISSING_ID\"\r\n                });\r\n            }\r\n\r\n            const paciente = await PacienteService.deletePaciente(Number(id));\r\n            return res.status(200).json({\r\n                message: \"Paciente eliminado correctamente\",\r\n                paciente\r\n            });\r\n        } catch (error) {\r\n            console.error(\"Error en deletePaciente:\", error);\r\n            if (error instanceof PacienteServiceError) {\r\n                return res.status(400).json({\r\n                    error: error.message,\r\n                    code: error.code\r\n                });\r\n            }\r\n            return res.status(500).json({\r\n                error: \"Error interno del servidor\",\r\n                code: \"INTERNAL_ERROR\"\r\n            });\r\n        }\r\n    }\r\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 498, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 512, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/src/lib/corsMiddleware.ts"],"sourcesContent":["import { NextApiRequest, NextApiResponse } from \"next\";\r\nimport Cors from \"cors\";\r\n\r\nconst cors = Cors({\r\n  methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"],\r\n  origin: \"*\",\r\n});\r\n\r\nfunction runMiddleware(req: NextApiRequest, res: NextApiResponse, fn: Function) {\r\n  return new Promise((resolve, reject) => {\r\n    fn(req, res, (result: any) => {\r\n      if (result instanceof Error) {\r\n        return reject(result);\r\n      }\r\n      return resolve(result);\r\n    });\r\n  });\r\n}\r\n\r\nexport default async function corsMiddleware(req: NextApiRequest, res: NextApiResponse) {\r\n  await runMiddleware(req, res, cors);\r\n}\r\n"],"names":[],"mappings":";;;AACA;;AAEA,MAAM,OAAO,CAAA,GAAA,iGAAA,CAAA,UAAI,AAAD,EAAE;IAChB,SAAS;QAAC;QAAO;QAAQ;QAAO;KAAS;IACzC,QAAQ;AACV;AAEA,SAAS,cAAc,GAAmB,EAAE,GAAoB,EAAE,EAAY;IAC5E,OAAO,IAAI,QAAQ,CAAC,SAAS;QAC3B,GAAG,KAAK,KAAK,CAAC;YACZ,IAAI,kBAAkB,OAAO;gBAC3B,OAAO,OAAO;YAChB;YACA,OAAO,QAAQ;QACjB;IACF;AACF;AAEe,eAAe,eAAe,GAAmB,EAAE,GAAoB;IACpF,MAAM,cAAc,KAAK,KAAK;AAChC"}},
    {"offset": {"line": 539, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 545, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/src/pages/api/ApiPaciente.ts"],"sourcesContent":["import { NextApiRequest, NextApiResponse } from \"next\";\r\nimport { PacienteController } from \"@/controller/PacienteController\";\r\nimport corsMiddleware from \"@/lib/corsMiddleware\";\r\n\r\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\r\n    try {\r\n        await corsMiddleware(req, res);\r\n\r\n        const { method } = req;\r\n\r\n        switch (method) {\r\n            case \"GET\":\r\n                if (req.query.id || req.query.CID || req.query.nombre || req.query.apellido || req.query.cuidador_id) {\r\n                    return await PacienteController.getPaciente(req, res);\r\n                } else {\r\n                    return await PacienteController.getPacientes(req, res);\r\n                }\r\n\r\n            case \"POST\":\r\n                return await PacienteController.createPaciente(req, res);\r\n\r\n            case \"PUT\":\r\n                if (req.query.id) {\r\n                    return await PacienteController.updatePaciente(req, res);\r\n                } else {\r\n                    return res.status(400).json({\r\n                        error: \"El ID es requerido para actualizar un paciente\",\r\n                        code: \"MISSING_ID\"\r\n                    });\r\n                }\r\n\r\n            case \"DELETE\":\r\n                if (req.query.id) {\r\n                    return await PacienteController.deletePaciente(req, res);\r\n                } else {\r\n                    return res.status(400).json({\r\n                        error: \"El ID es requerido para eliminar un paciente\",\r\n                        code: \"MISSING_ID\"\r\n                    });\r\n                }\r\n\r\n            default:\r\n                return res.status(405).json({\r\n                    error: \"Método no permitido\",\r\n                    code: \"METHOD_NOT_ALLOWED\"\r\n                });\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error en la API de pacientes:\", error);\r\n        return res.status(500).json({\r\n            error: \"Error interno del servidor\",\r\n            code: \"INTERNAL_SERVER_ERROR\"\r\n        });\r\n    }\r\n}"],"names":[],"mappings":";;;AACA;AACA;;;AAEe,eAAe,QAAQ,GAAmB,EAAE,GAAoB;IAC3E,IAAI;QACA,MAAM,CAAA,GAAA,qHAAA,CAAA,UAAc,AAAD,EAAE,KAAK;QAE1B,MAAM,EAAE,MAAM,EAAE,GAAG;QAEnB,OAAQ;YACJ,KAAK;gBACD,IAAI,IAAI,KAAK,CAAC,EAAE,IAAI,IAAI,KAAK,CAAC,GAAG,IAAI,IAAI,KAAK,CAAC,MAAM,IAAI,IAAI,KAAK,CAAC,QAAQ,IAAI,IAAI,KAAK,CAAC,WAAW,EAAE;oBAClG,OAAO,MAAM,gIAAA,CAAA,qBAAkB,CAAC,WAAW,CAAC,KAAK;gBACrD,OAAO;oBACH,OAAO,MAAM,gIAAA,CAAA,qBAAkB,CAAC,YAAY,CAAC,KAAK;gBACtD;YAEJ,KAAK;gBACD,OAAO,MAAM,gIAAA,CAAA,qBAAkB,CAAC,cAAc,CAAC,KAAK;YAExD,KAAK;gBACD,IAAI,IAAI,KAAK,CAAC,EAAE,EAAE;oBACd,OAAO,MAAM,gIAAA,CAAA,qBAAkB,CAAC,cAAc,CAAC,KAAK;gBACxD,OAAO;oBACH,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;wBACxB,OAAO;wBACP,MAAM;oBACV;gBACJ;YAEJ,KAAK;gBACD,IAAI,IAAI,KAAK,CAAC,EAAE,EAAE;oBACd,OAAO,MAAM,gIAAA,CAAA,qBAAkB,CAAC,cAAc,CAAC,KAAK;gBACxD,OAAO;oBACH,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;wBACxB,OAAO;wBACP,MAAM;oBACV;gBACJ;YAEJ;gBACI,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;oBACxB,OAAO;oBACP,MAAM;gBACV;QACR;IACJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YACxB,OAAO;YACP,MAAM;QACV;IACJ;AACJ"}},
    {"offset": {"line": 597, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 602, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/node_modules/next/dist/src/server/route-modules/pages-api/module.compiled.js"],"sourcesContent":["if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/pages-api/module.js')\n} else {\n  if (process.env.NODE_ENV === 'development') {\n    module.exports = require('next/dist/compiled/next-server/pages-api.runtime.dev.js')\n  } else if (process.env.TURBOPACK) {\n    module.exports = require('next/dist/compiled/next-server/pages-api-turbo.runtime.prod.js')\n  } else {\n    module.exports = require('next/dist/compiled/next-server/pages-api.runtime.prod.js')\n  }\n}\n"],"names":["process","env","NEXT_RUNTIME","module","exports","require","NODE_ENV","TURBOPACK"],"mappings":"AAAA,IAAIA,QAAQC,GAAG,CAACC,YAAY,KAAK,MAAQ;;AAEzC,OAAO;IACL,IAAIF,QAAQC,GAAG,CAACK,QAAQ,KAAK,WAAe;QAC1CH,OAAOC,OAAO,GAAGC,QAAQ;IAC3B,OAAO,IAAIL,QAAQC,GAAG,CAACM,SAAS,EAAE;;IAIlC;AACF","ignoreList":[0]}},
    {"offset": {"line": 611, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 617, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/node_modules/next/dist/src/server/route-kind.ts"],"sourcesContent":["export const enum RouteKind {\n  /**\n   * `PAGES` represents all the React pages that are under `pages/`.\n   */\n  PAGES = 'PAGES',\n  /**\n   * `PAGES_API` represents all the API routes under `pages/api/`.\n   */\n  PAGES_API = 'PAGES_API',\n  /**\n   * `APP_PAGE` represents all the React pages that are under `app/` with the\n   * filename of `page.{j,t}s{,x}`.\n   */\n  APP_PAGE = 'APP_PAGE',\n  /**\n   * `APP_ROUTE` represents all the API routes and metadata routes that are under `app/` with the\n   * filename of `route.{j,t}s{,x}`.\n   */\n  APP_ROUTE = 'APP_ROUTE',\n\n  /**\n   * `IMAGE` represents all the images that are generated by `next/image`.\n   */\n  IMAGE = 'IMAGE',\n}\n"],"names":["RouteKind"],"mappings":";;;AAAO,IAAWA,YAAAA,WAAAA,GAAAA,SAAAA,SAAAA;IAChB;;GAEC,GAAA,SAAA,CAAA,QAAA,GAAA;IAED;;GAEC,GAAA,SAAA,CAAA,YAAA,GAAA;IAED;;;GAGC,GAAA,SAAA,CAAA,WAAA,GAAA;IAED;;;GAGC,GAAA,SAAA,CAAA,YAAA,GAAA;IAGD;;GAEC,GAAA,SAAA,CAAA,QAAA,GAAA;WAtBeA;MAwBjB","ignoreList":[0]}},
    {"offset": {"line": 640, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 646, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/node_modules/next/dist/src/build/templates/helpers.ts"],"sourcesContent":["/**\n * Hoists a name from a module or promised module.\n *\n * @param module the module to hoist the name from\n * @param name the name to hoist\n * @returns the value on the module (or promised module)\n */\nexport function hoist(module: any, name: string) {\n  // If the name is available in the module, return it.\n  if (name in module) {\n    return module[name]\n  }\n\n  // If a property called `then` exists, assume it's a promise and\n  // return a promise that resolves to the name.\n  if ('then' in module && typeof module.then === 'function') {\n    return module.then((mod: any) => hoist(mod, name))\n  }\n\n  // If we're trying to hoise the default export, and the module is a function,\n  // return the module itself.\n  if (typeof module === 'function' && name === 'default') {\n    return module\n  }\n\n  // Otherwise, return undefined.\n  return undefined\n}\n"],"names":["hoist","module","name","then","mod","undefined"],"mappings":"AAAA;;;;;;CAMC,GACD;;;AAAO,SAASA,MAAMC,MAAW,EAAEC,IAAY;IAC7C,qDAAqD;IACrD,IAAIA,QAAQD,QAAQ;QAClB,OAAOA,MAAM,CAACC,KAAK;IACrB;IAEA,gEAAgE;IAChE,8CAA8C;IAC9C,IAAI,UAAUD,UAAU,OAAOA,OAAOE,IAAI,KAAK,YAAY;QACzD,OAAOF,OAAOE,IAAI,CAAC,CAACC,MAAaJ,MAAMI,KAAKF;IAC9C;IAEA,6EAA6E;IAC7E,4BAA4B;IAC5B,IAAI,OAAOD,WAAW,cAAcC,SAAS,WAAW;QACtD,OAAOD;IACT;IAEA,+BAA+B;IAC/B,OAAOI;AACT","ignoreList":[0]}},
    {"offset": {"line": 673, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 679, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/SrJordy/Desktop/Proyecto%20CTIS/backend-ctsi/node_modules/next/dist/src/build/templates/pages-api.ts"],"sourcesContent":["import { PagesAPIRouteModule } from '../../server/route-modules/pages-api/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\n\nimport { hoist } from './helpers'\n\n// Import the userland code.\nimport * as userland from 'VAR_USERLAND'\n\n// Re-export the handler (should be the default export).\nexport default hoist(userland, 'default')\n\n// Re-export config.\nexport const config = hoist(userland, 'config')\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new PagesAPIRouteModule({\n  definition: {\n    kind: RouteKind.PAGES_API,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n  },\n  userland,\n})\n"],"names":["PagesAPIRouteModule","RouteKind","hoist","userland","config","routeModule","definition","kind","PAGES_API","page","pathname","bundlePath","filename"],"mappings":";;;;;AAAA,SAASA,mBAAmB,QAAQ,uDAAsD;AAC1F,SAASC,SAAS,QAAQ,0BAAyB;AAEnD,SAASC,KAAK,QAAQ,YAAW;AAEjC,4BAA4B;AAC5B,YAAYC,cAAc,eAAc;;;;;yMAGzBD,QAAAA,EAAMC,6HAAU,WAAU;AAGlC,MAAMC,2KAASF,QAAAA,EAAMC,6HAAU,UAAS;AAGxC,MAAME,cAAc,qMAAIL,sBAAAA,CAAoB;IACjDM,YAAY;QACVC,8JAAMN,YAAAA,CAAUO,SAAS;QACzBC,MAAM;QACNC,UAAU;QACV,2CAA2C;QAC3CC,YAAY;QACZC,UAAU;IACZ;cACAT;AACF,GAAE","ignoreList":[0]}},
    {"offset": {"line": 706, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}